// Code generated by protoc-gen-go. DO NOT EDIT.
// source: departemen.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	departemen.proto

It has these top-level messages:
	AddDepartemenReq
	ReadDepartemenByNamaReq
	ReadDepartemenByNamaResp
	ReadDepartemenResp
	UpdateDepartemenReq
	ReadDepartemenByKeteranganReq
	ReadDepartemenByKeteranganResp
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddDepartemenReq struct {
	IdDepartemen   string `protobuf:"bytes,1,opt,name=idDepartemen" json:"idDepartemen,omitempty"`
	NamaDepartemen string `protobuf:"bytes,2,opt,name=namaDepartemen" json:"namaDepartemen,omitempty"`
	Status         string `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Keterangan     string `protobuf:"bytes,4,opt,name=keterangan" json:"keterangan,omitempty"`
}

func (m *AddDepartemenReq) Reset()                    { *m = AddDepartemenReq{} }
func (m *AddDepartemenReq) String() string            { return proto.CompactTextString(m) }
func (*AddDepartemenReq) ProtoMessage()               {}
func (*AddDepartemenReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddDepartemenReq) GetIdDepartemen() string {
	if m != nil {
		return m.IdDepartemen
	}
	return ""
}

func (m *AddDepartemenReq) GetNamaDepartemen() string {
	if m != nil {
		return m.NamaDepartemen
	}
	return ""
}

func (m *AddDepartemenReq) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *AddDepartemenReq) GetKeterangan() string {
	if m != nil {
		return m.Keterangan
	}
	return ""
}

type ReadDepartemenByNamaReq struct {
	NamaDepartemen string `protobuf:"bytes,1,opt,name=namaDepartemen" json:"namaDepartemen,omitempty"`
}

func (m *ReadDepartemenByNamaReq) Reset()                    { *m = ReadDepartemenByNamaReq{} }
func (m *ReadDepartemenByNamaReq) String() string            { return proto.CompactTextString(m) }
func (*ReadDepartemenByNamaReq) ProtoMessage()               {}
func (*ReadDepartemenByNamaReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReadDepartemenByNamaReq) GetNamaDepartemen() string {
	if m != nil {
		return m.NamaDepartemen
	}
	return ""
}

type ReadDepartemenByNamaResp struct {
	IdDepartemen   string `protobuf:"bytes,1,opt,name=idDepartemen" json:"idDepartemen,omitempty"`
	NamaDepartemen string `protobuf:"bytes,2,opt,name=namaDepartemen" json:"namaDepartemen,omitempty"`
	Status         string `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Keterangan     string `protobuf:"bytes,4,opt,name=keterangan" json:"keterangan,omitempty"`
}

func (m *ReadDepartemenByNamaResp) Reset()                    { *m = ReadDepartemenByNamaResp{} }
func (m *ReadDepartemenByNamaResp) String() string            { return proto.CompactTextString(m) }
func (*ReadDepartemenByNamaResp) ProtoMessage()               {}
func (*ReadDepartemenByNamaResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReadDepartemenByNamaResp) GetIdDepartemen() string {
	if m != nil {
		return m.IdDepartemen
	}
	return ""
}

func (m *ReadDepartemenByNamaResp) GetNamaDepartemen() string {
	if m != nil {
		return m.NamaDepartemen
	}
	return ""
}

func (m *ReadDepartemenByNamaResp) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ReadDepartemenByNamaResp) GetKeterangan() string {
	if m != nil {
		return m.Keterangan
	}
	return ""
}

type ReadDepartemenResp struct {
	AllDepartemen []*ReadDepartemenByNamaResp `protobuf:"bytes,1,rep,name=allDepartemen" json:"allDepartemen,omitempty"`
}

func (m *ReadDepartemenResp) Reset()                    { *m = ReadDepartemenResp{} }
func (m *ReadDepartemenResp) String() string            { return proto.CompactTextString(m) }
func (*ReadDepartemenResp) ProtoMessage()               {}
func (*ReadDepartemenResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadDepartemenResp) GetAllDepartemen() []*ReadDepartemenByNamaResp {
	if m != nil {
		return m.AllDepartemen
	}
	return nil
}

type UpdateDepartemenReq struct {
	IdDepartemen   string `protobuf:"bytes,1,opt,name=idDepartemen" json:"idDepartemen,omitempty"`
	NamaDepartemen string `protobuf:"bytes,2,opt,name=namaDepartemen" json:"namaDepartemen,omitempty"`
	Status         string `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Keterangan     string `protobuf:"bytes,4,opt,name=keterangan" json:"keterangan,omitempty"`
}

func (m *UpdateDepartemenReq) Reset()                    { *m = UpdateDepartemenReq{} }
func (m *UpdateDepartemenReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateDepartemenReq) ProtoMessage()               {}
func (*UpdateDepartemenReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateDepartemenReq) GetIdDepartemen() string {
	if m != nil {
		return m.IdDepartemen
	}
	return ""
}

func (m *UpdateDepartemenReq) GetNamaDepartemen() string {
	if m != nil {
		return m.NamaDepartemen
	}
	return ""
}

func (m *UpdateDepartemenReq) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UpdateDepartemenReq) GetKeterangan() string {
	if m != nil {
		return m.Keterangan
	}
	return ""
}

type ReadDepartemenByKeteranganReq struct {
	Keterangan string `protobuf:"bytes,1,opt,name=Keterangan" json:"Keterangan,omitempty"`
}

func (m *ReadDepartemenByKeteranganReq) Reset()                    { *m = ReadDepartemenByKeteranganReq{} }
func (m *ReadDepartemenByKeteranganReq) String() string            { return proto.CompactTextString(m) }
func (*ReadDepartemenByKeteranganReq) ProtoMessage()               {}
func (*ReadDepartemenByKeteranganReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReadDepartemenByKeteranganReq) GetKeterangan() string {
	if m != nil {
		return m.Keterangan
	}
	return ""
}

type ReadDepartemenByKeteranganResp struct {
	KetDepartemen []*ReadDepartemenByNamaResp `protobuf:"bytes,1,rep,name=ketDepartemen" json:"ketDepartemen,omitempty"`
}

func (m *ReadDepartemenByKeteranganResp) Reset()                    { *m = ReadDepartemenByKeteranganResp{} }
func (m *ReadDepartemenByKeteranganResp) String() string            { return proto.CompactTextString(m) }
func (*ReadDepartemenByKeteranganResp) ProtoMessage()               {}
func (*ReadDepartemenByKeteranganResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ReadDepartemenByKeteranganResp) GetKetDepartemen() []*ReadDepartemenByNamaResp {
	if m != nil {
		return m.KetDepartemen
	}
	return nil
}

func init() {
	proto.RegisterType((*AddDepartemenReq)(nil), "grpc.AddDepartemenReq")
	proto.RegisterType((*ReadDepartemenByNamaReq)(nil), "grpc.ReadDepartemenByNamaReq")
	proto.RegisterType((*ReadDepartemenByNamaResp)(nil), "grpc.ReadDepartemenByNamaResp")
	proto.RegisterType((*ReadDepartemenResp)(nil), "grpc.ReadDepartemenResp")
	proto.RegisterType((*UpdateDepartemenReq)(nil), "grpc.UpdateDepartemenReq")
	proto.RegisterType((*ReadDepartemenByKeteranganReq)(nil), "grpc.ReadDepartemenByKeteranganReq")
	proto.RegisterType((*ReadDepartemenByKeteranganResp)(nil), "grpc.ReadDepartemenByKeteranganResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for DepartemenService service

type DepartemenServiceClient interface {
	AddDepartemen(ctx context.Context, in *AddDepartemenReq, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	ReadDepartemen(ctx context.Context, in *google_protobuf.Empty, opts ...grpc1.CallOption) (*ReadDepartemenResp, error)
	UpdateDepartemen(ctx context.Context, in *UpdateDepartemenReq, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	ReadDepartemenByNama(ctx context.Context, in *ReadDepartemenByNamaReq, opts ...grpc1.CallOption) (*ReadDepartemenByNamaResp, error)
	ReadDepartemenByKeterangan(ctx context.Context, in *ReadDepartemenByKeteranganReq, opts ...grpc1.CallOption) (*ReadDepartemenByKeteranganResp, error)
}

type departemenServiceClient struct {
	cc *grpc1.ClientConn
}

func NewDepartemenServiceClient(cc *grpc1.ClientConn) DepartemenServiceClient {
	return &departemenServiceClient{cc}
}

func (c *departemenServiceClient) AddDepartemen(ctx context.Context, in *AddDepartemenReq, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.DepartemenService/AddDepartemen", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departemenServiceClient) ReadDepartemen(ctx context.Context, in *google_protobuf.Empty, opts ...grpc1.CallOption) (*ReadDepartemenResp, error) {
	out := new(ReadDepartemenResp)
	err := grpc1.Invoke(ctx, "/grpc.DepartemenService/ReadDepartemen", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departemenServiceClient) UpdateDepartemen(ctx context.Context, in *UpdateDepartemenReq, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/grpc.DepartemenService/UpdateDepartemen", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departemenServiceClient) ReadDepartemenByNama(ctx context.Context, in *ReadDepartemenByNamaReq, opts ...grpc1.CallOption) (*ReadDepartemenByNamaResp, error) {
	out := new(ReadDepartemenByNamaResp)
	err := grpc1.Invoke(ctx, "/grpc.DepartemenService/ReadDepartemenByNama", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departemenServiceClient) ReadDepartemenByKeterangan(ctx context.Context, in *ReadDepartemenByKeteranganReq, opts ...grpc1.CallOption) (*ReadDepartemenByKeteranganResp, error) {
	out := new(ReadDepartemenByKeteranganResp)
	err := grpc1.Invoke(ctx, "/grpc.DepartemenService/ReadDepartemenByKeterangan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DepartemenService service

type DepartemenServiceServer interface {
	AddDepartemen(context.Context, *AddDepartemenReq) (*google_protobuf.Empty, error)
	ReadDepartemen(context.Context, *google_protobuf.Empty) (*ReadDepartemenResp, error)
	UpdateDepartemen(context.Context, *UpdateDepartemenReq) (*google_protobuf.Empty, error)
	ReadDepartemenByNama(context.Context, *ReadDepartemenByNamaReq) (*ReadDepartemenByNamaResp, error)
	ReadDepartemenByKeterangan(context.Context, *ReadDepartemenByKeteranganReq) (*ReadDepartemenByKeteranganResp, error)
}

func RegisterDepartemenServiceServer(s *grpc1.Server, srv DepartemenServiceServer) {
	s.RegisterService(&_DepartemenService_serviceDesc, srv)
}

func _DepartemenService_AddDepartemen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDepartemenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartemenServiceServer).AddDepartemen(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DepartemenService/AddDepartemen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartemenServiceServer).AddDepartemen(ctx, req.(*AddDepartemenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartemenService_ReadDepartemen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartemenServiceServer).ReadDepartemen(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DepartemenService/ReadDepartemen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartemenServiceServer).ReadDepartemen(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartemenService_UpdateDepartemen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepartemenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartemenServiceServer).UpdateDepartemen(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DepartemenService/UpdateDepartemen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartemenServiceServer).UpdateDepartemen(ctx, req.(*UpdateDepartemenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartemenService_ReadDepartemenByNama_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDepartemenByNamaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartemenServiceServer).ReadDepartemenByNama(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DepartemenService/ReadDepartemenByNama",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartemenServiceServer).ReadDepartemenByNama(ctx, req.(*ReadDepartemenByNamaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartemenService_ReadDepartemenByKeterangan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDepartemenByKeteranganReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartemenServiceServer).ReadDepartemenByKeterangan(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DepartemenService/ReadDepartemenByKeterangan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartemenServiceServer).ReadDepartemenByKeterangan(ctx, req.(*ReadDepartemenByKeteranganReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DepartemenService_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.DepartemenService",
	HandlerType: (*DepartemenServiceServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "AddDepartemen",
			Handler:    _DepartemenService_AddDepartemen_Handler,
		},
		{
			MethodName: "ReadDepartemen",
			Handler:    _DepartemenService_ReadDepartemen_Handler,
		},
		{
			MethodName: "UpdateDepartemen",
			Handler:    _DepartemenService_UpdateDepartemen_Handler,
		},
		{
			MethodName: "ReadDepartemenByNama",
			Handler:    _DepartemenService_ReadDepartemenByNama_Handler,
		},
		{
			MethodName: "ReadDepartemenByKeterangan",
			Handler:    _DepartemenService_ReadDepartemenByKeterangan_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "departemen.proto",
}

func init() { proto.RegisterFile("departemen.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x53, 0x4d, 0x4f, 0xc2, 0x40,
	0x10, 0xa5, 0x42, 0x48, 0x1c, 0x85, 0xe0, 0x68, 0xb0, 0xd6, 0xd0, 0x98, 0xd5, 0x18, 0x4e, 0x25,
	0xc1, 0x1f, 0x60, 0x30, 0x18, 0x0f, 0x26, 0x1e, 0x6a, 0x8c, 0x89, 0xb7, 0x85, 0x0e, 0x0d, 0x81,
	0x7e, 0x50, 0x16, 0x13, 0xfe, 0x88, 0x89, 0x17, 0xef, 0xfe, 0x4b, 0xd3, 0x16, 0xa1, 0x5b, 0x17,
	0x88, 0x37, 0x8e, 0xfb, 0xe6, 0xcd, 0xcc, 0x9b, 0x99, 0x7d, 0x50, 0x73, 0x28, 0xe4, 0x91, 0x20,
	0x8f, 0x7c, 0x2b, 0x8c, 0x02, 0x11, 0x60, 0xc9, 0x8d, 0xc2, 0xbe, 0x71, 0xee, 0x06, 0x81, 0x3b,
	0xa6, 0x56, 0x82, 0xf5, 0x66, 0x83, 0x16, 0x79, 0xa1, 0x98, 0xa7, 0x14, 0xf6, 0xa1, 0x41, 0xad,
	0xe3, 0x38, 0xdd, 0x65, 0xaa, 0x4d, 0x13, 0x64, 0x70, 0x38, 0xcc, 0x40, 0xba, 0x76, 0xa1, 0x35,
	0xf7, 0x6d, 0x09, 0xc3, 0x6b, 0xa8, 0xfa, 0xdc, 0xe3, 0x19, 0xd6, 0x5e, 0xc2, 0xca, 0xa1, 0x58,
	0x87, 0xf2, 0x54, 0x70, 0x31, 0x9b, 0xea, 0xc5, 0x24, 0xbe, 0x78, 0xa1, 0x09, 0x30, 0x22, 0x41,
	0x11, 0xf7, 0x5d, 0xee, 0xeb, 0xa5, 0x24, 0x96, 0x41, 0x58, 0x07, 0x4e, 0x6d, 0xe2, 0x99, 0x8e,
	0x77, 0xf3, 0x27, 0xee, 0xf1, 0x58, 0xde, 0xdf, 0xd6, 0x9a, 0xaa, 0x35, 0xfb, 0xd2, 0x40, 0x57,
	0xd7, 0x98, 0x86, 0x3b, 0x31, 0xe3, 0x1b, 0xa0, 0xac, 0x2f, 0x51, 0xd6, 0x85, 0x0a, 0x1f, 0x8f,
	0x25, 0x69, 0xc5, 0xe6, 0x41, 0xdb, 0xb4, 0xe2, 0x6b, 0x5a, 0xeb, 0x06, 0xb2, 0xe5, 0x24, 0xf6,
	0xa9, 0xc1, 0xf1, 0x4b, 0xe8, 0x70, 0x41, 0xbb, 0x77, 0xdb, 0x5b, 0x68, 0xe4, 0xc7, 0x78, 0x5c,
	0x46, 0x63, 0x91, 0x26, 0xc0, 0x0a, 0x58, 0x48, 0xcc, 0x20, 0x6c, 0x00, 0xe6, 0xa6, 0x02, 0xe9,
	0x12, 0x47, 0x24, 0xfe, 0xbf, 0x44, 0x29, 0xa9, 0xfd, 0x5d, 0x84, 0xa3, 0xd5, 0xf3, 0x99, 0xa2,
	0xf7, 0x61, 0x9f, 0xb0, 0x03, 0x15, 0xc9, 0x32, 0x58, 0x4f, 0xab, 0xe6, 0x7d, 0x64, 0xd4, 0xad,
	0xd4, 0x7a, 0xd6, 0xaf, 0xf5, 0xac, 0xfb, 0xd8, 0x7a, 0xac, 0x80, 0x5d, 0xa8, 0xca, 0x1a, 0x70,
	0x0d, 0xd7, 0xd0, 0x55, 0x8a, 0x63, 0xad, 0xac, 0x80, 0x0f, 0x50, 0xcb, 0x9f, 0x18, 0xcf, 0x52,
	0xbe, 0xe2, 0xf4, 0x1b, 0xe4, 0xbc, 0xc2, 0x89, 0x6a, 0x25, 0xd8, 0xd8, 0xb4, 0xae, 0x89, 0xb1,
	0x65, 0x9b, 0xac, 0x80, 0x43, 0x30, 0xd6, 0x1f, 0x0a, 0x2f, 0xd5, 0xf9, 0xd2, 0x5f, 0x30, 0xae,
	0xb6, 0x93, 0xe2, 0x56, 0xbd, 0x72, 0x32, 0xd5, 0xcd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa7,
	0xc6, 0x8c, 0x90, 0x07, 0x05, 0x00, 0x00,
}
